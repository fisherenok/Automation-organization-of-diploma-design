//const GenerateDocument = (props) => {
  //const { documentName, templateName = 'Protocol' } = props;
  const templateName = 'Protocol';
  function replaceErrors(key, value) {
    if (value instanceof Error) {
      return Object.getOwnPropertyNames(value).reduce(function(error, key) {
        error[key] = value[key];
        return error;
      }, {});
    }
    return value;
  }

  function errorHandler(error) {
    console.log(JSON.stringify({error: error}, replaceErrors));

    if (error.properties && error.properties.errors instanceof Array) {
      const errorMessages = error.properties.errors.map(function (error) {
        return error.properties.explanation;
      }).join("\n");
      console.log('errorMessages', errorMessages);
    }
    throw error;
  }

  const content = fs
    .readFileSync(path.resolve(__dirname, `${templateName}.docx`), 'binary');

  const zip = new PizZip(content);
  let doc;
  try {
    doc = new Docxtemplater(zip);
  } catch(error) {
    errorHandler(error);
  }



  try {
    doc.render()
  }
  catch (error) {
    errorHandler(error);
  }

  const buf = doc.getZip()
    .generate({type: 'nodebuffer'});

  fs.writeFileSync(path.resolve(__dirname, `result.docx`), buf);
//   const out=doc.getZip().generate({
//     type:"blob",
//     mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
//   })
//   saveAs(out,"output.docx")
//};
